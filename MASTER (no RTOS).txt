#include <include.h>
#include <ulib.h>
#include <stdio.h>
#include <hal.h>
#include <string.h>
#include "mbed.h"
#include "basic_rf.h"
#include "bmac.h"
#include "Timer.h"

//#define SEND
#define RECEIVE
#define PRINT

char tx_buf[RF_MAX_PAYLOAD_SIZE];
char rx_buf[RF_MAX_PAYLOAD_SIZE];

RF_RX_INFO rfRxInfo;
RF_TX_INFO rfTxInfo;

uint8_t rx_buf_empty = 1;

// Counter for number of detected packets that have valid data
static uint16_t rxContentSuccess = 0;
// Counter for number of total detected packets
static uint16_t rxTotal = 0;
// Counter for number of detected packets from the preamble perspective, regardless of contents
static uint16_t mrfRxISRcallbackCounter = 0;

static int score = 0;

static int feedback_flag = 1;

DigitalOut myLed_1(LED1);
DigitalOut myLed_2(LED2);

void tx_task();
void rx_task();
void print_task();

// Count number of detected packets and toggle a pin for each packet
void mrfIsrCallback()
{		
	mrfRxISRcallbackCounter++;
	rx_buf_empty = 0;
}

int main(void)
{	
	
	rfRxInfo.pPayload = rx_buf;
	rfRxInfo.max_length = RF_MAX_PAYLOAD_SIZE;
	rf_init(&rfRxInfo, RADIO_CHANNEL, 0xFFFF, MAC_ADDR); //RX struct, channel, panId, myAddr
	//rf_addr_decode_set_my_mac(0x0003); // function to set myAddr if not performed during init
	//rf_data_mode();
	//rf_auto_ack_enable(); // enable if IEEE 802.15.4 ack packets are requested
	rf_auto_ack_disable();
	
	tx_task();
	rx_task();
	print_task();
	
	
	
	return 0;
}

void rx_task ()
{
  while (!feedback_flag) {
    // Wait until an RX packet is received
    if(!rx_buf_empty) {		
			if (strncmp(rx_buf, "hit", 41) == 0) {
				myLed_1 = 1;
				wait(0.1);
				myLed_1 = 0;
				score += 100;
				feedback_flag = 1;
				//rxContentSuccess++;
			}
			else if (strncmp(rx_buf, "miss", 41) == 0) {
				feedback_flag = 1;
			}
			//rxTotal++;
			memset(rx_buf,0,strlen(rx_buf));
			rx_buf_empty = 1;
		}
  }
	
	return;
}

void tx_task ()
{
	sprintf (tx_buf, "lit");
	rfTxInfo.pPayload=tx_buf;
	rfTxInfo.length=strlen(tx_buf);
	rfTxInfo.destAddr = 0x000B; // destination node address
	
	int packetsToSend = 10;
	int sentPackets = 0;
	while(packetsToSend!=0) {
		if (feedback_flag) {
		
			rf_rx_off();
			rf_tx_packet(&rfTxInfo);
			rf_rx_on();
			memset(tx_buf,0,strlen(tx_buf));
		
			myLed_2 = 1;
			wait(0.1);
			myLed_2 = 0;
		
			packetsToSend--;
			sentPackets++;
		
			feedback_flag = 0;
		}
	}
}

void print_task () {
	
	printf("score: %d", score);
	
}
